@startuml

abstract class org.rudi.common.storage.entity.AbstractLabelizedEntity <<MappedSuperclass>>  {
	{field} {static} +CODE_COLUMN_LENGTH : int
	{field} {static} +CODE_COLUMN_NAME : String
	{field} +@Column("code") code : String
	{field} +@Column("label") label : String
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


abstract class org.rudi.common.storage.entity.AbstractLongIdEntity <<MappedSuperclass>>  {
	{field} +@Column("id") @Id id : Long
	{field} {static} -serialVersionUID : long
	{field} +@Column("uuid") uuid : java.util.UUID
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


abstract class org.rudi.common.storage.entity.AbstractLongIdEntity$AbstractLongIdEntityBuilder {
	{field} -id : Long
	{field} -uuid : java.util.UUID
	{method}  {abstract} +build () : org.rudi.common.storage.entity.AbstractLongIdEntity
	{method} +id ( id : Long ) : org.rudi.common.storage.entity.AbstractLongIdEntity$AbstractLongIdEntityBuilder
	{method}  {abstract} #self () : org.rudi.common.storage.entity.AbstractLongIdEntity$AbstractLongIdEntityBuilder
	{method} +toString () : String
	{method} +uuid ( uuid : java.util.UUID ) : org.rudi.common.storage.entity.AbstractLongIdEntity$AbstractLongIdEntityBuilder
}


abstract class org.rudi.common.storage.entity.AbstractStampedEntity <<MappedSuperclass>>  {
	{field} +@Column("closing_date") closingDate : java.time.LocalDateTime
	{field} +@Column("opening_date") openingDate : java.time.LocalDateTime
	{field} +@Column("order_") order : int
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


abstract class org.rudi.common.storage.entity.AbstractTranslationEntity <<MappedSuperclass>>  {
	{field} +@Column("lang") lang : String
	{field} {static} -serialVersionUID : long
	{field} +@Column("text") text : String
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.common.storage.entity.HibernateEntityHelper {
	{method}  {static} +setCollection ( collectionGetter : java.util.function.Supplier , newCollection : java.util.Collection ) : void
}


interface org.rudi.common.storage.entity.PositionedStatus {
	{method}  {abstract} +isFinal () : boolean
	{method}  {abstract} +isInitial () : boolean
}


class org.rudi.common.storage.entity.SkosConceptCodeColumn {
	{field} {static} +LENGTH : int
	{field} {static} +NAME : String
	{field} {static} +TABLE_NAME : String
}


enum org.rudi.common.storage.entity.StatusPosition {
	{field} +FINAL
	{field} +INITIAL
	{field} +INTERMEDIATE
}


class org.rudi.facet.bpmn.entity.form.FormDefinitionEntity <<Entity>>  <<Table>>  {
 {TableName=form_definition}
--
	{field} +@Column("name") name : String
	{field} {static} -serialVersionUID : long
	{method} +addFormSectionDefinition ( formSectionDefinitionEntity : org.rudi.facet.bpmn.entity.form.FormSectionDefinitionEntity ) : void
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +lookupFormSectionDefinition ( uuid : java.util.UUID ) : org.rudi.facet.bpmn.entity.form.FormSectionDefinitionEntity
	{method} +toString () : String
}


class org.rudi.facet.bpmn.entity.form.FormSectionDefinitionEntity <<Entity>>  <<Table>>  {
 {TableName=form_section_definition}
--
	{field} +@Column("order_") order : int
	{field} +@Column("read_only") readOnly : boolean
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.facet.bpmn.entity.form.ProcessFormDefinitionEntity <<Entity>>  <<Table>>  {
 {TableName=process_form_definition}
--
	{field} +@Column("action_name") actionName : String
	{field} +@Column("process_definition_id") processDefinitionId : String
	{field} +@Column("revision") revision : Integer
	{field} {static} -serialVersionUID : long
	{field} +@Column("user_task_id") userTaskId : String
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.facet.bpmn.entity.form.SectionDefinitionEntity <<Entity>>  <<Table>>  {
 {TableName=section_definition}
--
	{field} +@Column("definition") definition : String
	{field} +@Column("help") help : String
	{field} +@Column("label") label : String
	{field} +@Column("name") name : String
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


abstract class org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity <<MappedSuperclass>>  {
	{field} +@Column("assignee") assignee : String
	{field} +@Column("creation_date") creationDate : java.time.LocalDateTime
	{field} +@Column("data") data : String
	{field} +@Column("description") description : String
	{field} +@Column("functional_status") functionalStatus : String
	{field} +@Column("initiator") initiator : String
	{field} +@Column("process_definition_key") processDefinitionKey : String
	{field} +@Column("process_definition_version") processDefinitionVersion : Integer
	{field} {static} -serialVersionUID : long
	{field} +@Column("status") status : org.rudi.bpmn.core.bean.Status
	{field} +@Column("updated_date") updatedDate : java.time.LocalDateTime
	{field} +@Column("updator") updator : String
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


abstract class org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder {
	{field} -assignee : String
	{field} -creationDate : java.time.LocalDateTime
	{field} -data : String
	{field} -description : String
	{field} -functionalStatus : String
	{field} -initiator : String
	{field} -processDefinitionKey : String
	{field} -processDefinitionVersion : Integer
	{field} -status : org.rudi.bpmn.core.bean.Status
	{field} -updatedDate : java.time.LocalDateTime
	{field} -updator : String
	{method} +assignee ( assignee : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method}  {abstract} +build () : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity
	{method} +creationDate ( creationDate : java.time.LocalDateTime ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +data ( data : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +description ( description : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +functionalStatus ( functionalStatus : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +initiator ( initiator : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +processDefinitionKey ( processDefinitionKey : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +processDefinitionVersion ( processDefinitionVersion : Integer ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method}  {abstract} #self () : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +status ( status : org.rudi.bpmn.core.bean.Status ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +toString () : String
	{method} +updatedDate ( updatedDate : java.time.LocalDateTime ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
	{method} +updator ( updator : String ) : org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder
}


interface org.rudi.facet.bpmn.entity.workflow.AssetDescriptionEntity {
	{method}  {abstract} +getAssignee () : String
	{method}  {abstract} +getCreationDate () : java.time.LocalDateTime
	{method}  {abstract} +getData () : String
	{method}  {abstract} +getDescription () : String
	{method}  {abstract} +getFunctionalStatus () : String
	{method}  {abstract} +getInitiator () : String
	{method}  {abstract} +getProcessDefinitionKey () : String
	{method}  {abstract} +getProcessDefinitionVersion () : Integer
	{method}  {abstract} +getStatus () : org.rudi.bpmn.core.bean.Status
	{method}  {abstract} +getUpdatedDate () : java.time.LocalDateTime
	{method}  {abstract} +getUpdator () : String
	{method}  {abstract} +setAssignee ( assignee : String ) : void
	{method}  {abstract} +setCreationDate ( creationDate : java.time.LocalDateTime ) : void
	{method}  {abstract} +setData ( data : String ) : void
	{method}  {abstract} +setDescription ( description : String ) : void
	{method}  {abstract} +setFunctionalStatus ( functionalStatus : String ) : void
	{method}  {abstract} +setInitiator ( initiator : String ) : void
	{method}  {abstract} +setProcessDefinitionKey ( businessKey : String ) : void
	{method}  {abstract} +setProcessDefinitionVersion ( version : Integer ) : void
	{method}  {abstract} +setStatus ( status : org.rudi.bpmn.core.bean.Status ) : void
	{method}  {abstract} +setUpdatedDate ( updatedDate : java.time.LocalDateTime ) : void
	{method}  {abstract} +setUpdator ( updator : String ) : void
}


class org.rudi.microservice.projekt.storage.entity.ConfidentialityEntity <<Entity>>  <<Table>>  {
 {TableName=confidentiality}
 {TableSchema=projekt_data}
--
	{field} {static} +FIELD_CONFIDENTIALITY_ISPRIVATE : String
	{field} +@Column("description") description : String
	{field} +@Column("private_access") privateAccess : boolean
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


enum org.rudi.microservice.projekt.storage.entity.DatasetConfidentiality {
	{field} +OPENED
	{field} +RESTRICTED
	{field} +SELFDATA
}


enum org.rudi.microservice.projekt.storage.entity.OwnerType {
	{field} +ORGANIZATION
	{field} +USER
}


class org.rudi.microservice.projekt.storage.entity.ProjectTypeEntity <<Entity>>  <<Table>>  {
 {TableName=project_type}
 {TableSchema=projekt_data}
--
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.microservice.projekt.storage.entity.ReutilisationStatusEntity <<Entity>>  <<Table>>  {
 {TableName=reutilisation_status}
 {TableSchema=projekt_data}
--
	{field} +@Column("dataset_set_modification_allowed") datasetSetModificationAllowed : boolean
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
}


class org.rudi.microservice.projekt.storage.entity.SupportEntity <<Entity>>  <<Table>>  {
 {TableName=support}
 {TableSchema=projekt_data}
--
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.microservice.projekt.storage.entity.TargetAudienceEntity <<Entity>>  <<Table>>  {
 {TableName=target_audience}
 {TableSchema=projekt_data}
--
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.microservice.projekt.storage.entity.TerritorialScaleEntity <<Entity>>  <<Table>>  {
 {TableName=territorial_scale}
 {TableSchema=projekt_data}
--
	{field} {static} -serialVersionUID : long
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


class org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetEntity <<Entity>>  <<Table>>  {
 {TableName=linked_dataset}
 {TableSchema=projekt_data}
--
	{field} {static} +DATASET_CONFIDENTIALITY_FIELD : String
	{field} {static} +DATASET_ORGANIZATION_UUID_FIELD : String
	{field} {static} +DATASET_UUID_FIELD : String
	{field} {static} +END_DATE_FIELD : String
	{field} {static} +FIELD_ID : String
	{field} {static} +PROJECT_FK : String
	{field} {static} +STATUS_FIELD : String
	{field} +@Column("comment") comment : String
	{field} +@Column("dataset_organization_uuid") datasetOrganisationUuid : java.util.UUID
	{field} +@Column("dataset_uuid") datasetUuid : java.util.UUID
	{field} +@Column("end_date") endDate : java.time.LocalDateTime
	{field} {static} -serialVersionUID : long
	{method} +equals ( o : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


enum org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetStatus {
	{field} +ARCHIVED
	{field} +CANCELLED
	{field} +DISENGAGED
	{field} +DRAFT
	{field} +IN_PROGRESS
	{field} +VALIDATED
}


class org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestEntity <<Entity>>  <<Table>>  {
 {TableName=new_dataset_request}
 {TableSchema=projekt_data}
--
	{field} {static} +FIELD_ID : String
	{field} {static} +FIELD_NEW_DATASET_REQUEST_STATUS : String
	{field} {static} -serialVersionUID : long
	{field} +@Column("title") title : String
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


enum org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestStatus {
	{field} +ARCHIVED
	{field} +DRAFT
	{field} +IN_PROGRESS
	{field} +REFUSED
	{field} +VALIDATED
}


class org.rudi.microservice.projekt.storage.entity.project.ProjectEntity <<Entity>>  <<Table>>  {
 {TableName=project}
 {TableSchema=projekt_data}
--
	{field} {static} +FIELD_DATASET_REQUESTS : String
	{field} {static} +FIELD_ID : String
	{field} {static} +FIELD_LINKED_DATASET : String
	{field} {static} +FIELD_OWNER_UUID : String
	{field} +accessUrl : String
	{field} +@Column("contact_email") contactEmail : String
	{field} +@Column("desired_support_description") desiredSupportDescription : String
	{field} +@Column("detailed_territorial_scale") detailedTerritorialScale : String
	{field} +@Column("expected_completion_end_date") expectedCompletionEndDate : java.time.LocalDateTime
	{field} +@Column("expected_completion_start_date") expectedCompletionStartDate : java.time.LocalDateTime
	{field} +@Column("skos_concept_code") keywords : java.util.Set
	{field} +@Column("owner_uuid") ownerUuid : java.util.UUID
	{field} {static} -serialVersionUID : long
	{field} +@Column("skos_concept_code") themes : java.util.Set
	{field} +@Column("") title : String
	{method} +equals ( obj : Object ) : boolean
	{method} +hashCode () : int
	{method} +toString () : String
}


enum org.rudi.microservice.projekt.storage.entity.project.ProjectStatus {
	{field} +ARCHIVED
	{field} +CANCELLED
	{field} +DISENGAGED
	{field} +DRAFT
	{field} +IN_PROGRESS
	{field} +REJECTED
	{field} +VALIDATED
}




org.rudi.common.storage.entity.AbstractLabelizedEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.common.storage.entity.AbstractStampedEntity --|>  org.rudi.common.storage.entity.AbstractLabelizedEntity
org.rudi.common.storage.entity.AbstractTranslationEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.facet.bpmn.entity.form.FormDefinitionEntity "1" o-- "0..*"  org.rudi.facet.bpmn.entity.form.FormSectionDefinitionEntity :  @OneToMany\nformSectionDefinitions
org.rudi.facet.bpmn.entity.form.FormDefinitionEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.facet.bpmn.entity.form.FormSectionDefinitionEntity -->  org.rudi.facet.bpmn.entity.form.SectionDefinitionEntity :  @ManyToOne\nsectionDefinition
org.rudi.facet.bpmn.entity.form.FormSectionDefinitionEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.facet.bpmn.entity.form.ProcessFormDefinitionEntity -->  org.rudi.facet.bpmn.entity.form.FormDefinitionEntity :  @ManyToOne\nformDefinition
org.rudi.facet.bpmn.entity.form.ProcessFormDefinitionEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.facet.bpmn.entity.form.SectionDefinitionEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity --|>  org.rudi.common.storage.entity.AbstractLongIdEntity
org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity ..|>  org.rudi.facet.bpmn.entity.workflow.AssetDescriptionEntity
org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity$AbstractAssetDescriptionEntityBuilder --|>  org.rudi.common.storage.entity.AbstractLongIdEntity$AbstractLongIdEntityBuilder
org.rudi.microservice.projekt.storage.entity.ConfidentialityEntity --|>  org.rudi.common.storage.entity.AbstractStampedEntity
org.rudi.microservice.projekt.storage.entity.ProjectTypeEntity --|>  org.rudi.common.storage.entity.AbstractStampedEntity
org.rudi.microservice.projekt.storage.entity.ReutilisationStatusEntity --|>  org.rudi.common.storage.entity.AbstractStampedEntity
org.rudi.microservice.projekt.storage.entity.SupportEntity --|>  org.rudi.common.storage.entity.AbstractStampedEntity
org.rudi.microservice.projekt.storage.entity.TargetAudienceEntity --|>  org.rudi.common.storage.entity.AbstractStampedEntity
org.rudi.microservice.projekt.storage.entity.TerritorialScaleEntity --|>  org.rudi.common.storage.entity.AbstractStampedEntity
org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetEntity -->  org.rudi.microservice.projekt.storage.entity.DatasetConfidentiality :  @Column("dataset_confidentiality")\ndatasetConfidentiality
org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetEntity -->  org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetStatus :  @Column("linked_dataset_status")\nlinkedDatasetStatus
org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetEntity --|>  org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity
org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetStatus ..|>  org.rudi.common.storage.entity.PositionedStatus
org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestEntity -->  org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestStatus :  @Column("new_dataset_request_status")\nnewDatasetRequestStatus
org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestEntity --|>  org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity
org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestStatus ..|>  org.rudi.common.storage.entity.PositionedStatus
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity "1" o-- "0..*"  org.rudi.microservice.projekt.storage.entity.SupportEntity :  @ManyToMany\ndesiredSupports
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity "1" o-- "0..*"  org.rudi.microservice.projekt.storage.entity.TargetAudienceEntity :  @ManyToMany\ntargetAudiences
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity "1" o-- "0..*"  org.rudi.microservice.projekt.storage.entity.linkeddataset.LinkedDatasetEntity :  @OneToMany\nlinkedDatasets
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity "1" o-- "0..*"  org.rudi.microservice.projekt.storage.entity.newdatasetrequest.NewDatasetRequestEntity :  @OneToMany\ndatasetRequests
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity -->  org.rudi.microservice.projekt.storage.entity.ConfidentialityEntity :  @ManyToOne\nconfidentiality
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity -->  org.rudi.microservice.projekt.storage.entity.OwnerType :  @Column("owner_type")\nownerType
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity -->  org.rudi.microservice.projekt.storage.entity.ProjectTypeEntity :  @ManyToOne\ntype
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity -->  org.rudi.microservice.projekt.storage.entity.ReutilisationStatusEntity :  @ManyToOne\nreutilisationStatus
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity -->  org.rudi.microservice.projekt.storage.entity.TerritorialScaleEntity :  @ManyToOne\nterritorialScale
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity -->  org.rudi.microservice.projekt.storage.entity.project.ProjectStatus :  @Column("project_status")\nprojectStatus
org.rudi.microservice.projekt.storage.entity.project.ProjectEntity --|>  org.rudi.facet.bpmn.entity.workflow.AbstractAssetDescriptionEntity
org.rudi.microservice.projekt.storage.entity.project.ProjectStatus ..|>  org.rudi.common.storage.entity.PositionedStatus

hide methods

@enduml