<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.rudi</groupId>
		<artifactId>rudi-microservice-kalim</artifactId>
		<version>3.0.5</version>
	</parent>

	<artifactId>rudi-microservice-kalim-facade</artifactId>
	<description>RUDI Microservice Kalim Facade ${project.version}</description>
	<packaging>jar</packaging>

	<properties>
		<resource-directory>${project.basedir}/..</resource-directory>
		<resource-generation-directory>${project.basedir}/..</resource-generation-directory>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>rudi-microservice-kalim-service</artifactId>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>rudi-common-facade</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-security</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-circuitbreaker-resilience4j -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-circuitbreaker-resilience4j</artifactId>
		</dependency>

		<!-- Server Web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Swagger UI dependency -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
		</dependency>

		<!-- Swagger 2 doc dependency -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jasig.cas.client</groupId>
			<artifactId>cas-client-support-springboot</artifactId>
		</dependency>

		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
		</dependency>

	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<configuration>
					<modelPackage>org.rudi.microservice.kalim.core.bean</modelPackage>
					<generatorName>spring</generatorName>
					<library>spring-boot</library>
					<generateModelTests>false</generateModelTests>
					<generateModelDocumentation>false</generateModelDocumentation>
					<generateSupportingFiles>true</generateSupportingFiles>
					<generateApiDocumentation>true</generateApiDocumentation>
					<generateApis>true</generateApis>
					<generateModels>false</generateModels>
					<templateDirectory>${resource-generation-directory}/openapi/generation</templateDirectory>
					<verbose>false</verbose>
					<configOptions>
						<!-- Activer le 'interfaceOnly' à true pour la compile, sinon conflit, 
							et à false pour la génération -->
						<interfaceOnly>true</interfaceOnly>
						<dateLibrary>java8</dateLibrary>
						<containerDefaultToNull>true</containerDefaultToNull>
					</configOptions>
				</configuration>
				<executions>
					<execution>
						<id>generate-controllers-api</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<!-- Les interfaces sont généres dans la target, c'est normal -->
							<schemaMappings>Metadata=org.rudi.facet.kaccess.bean.Metadata</schemaMappings>
							<apiPackage>org.rudi.microservice.kalim.facade.controller.api</apiPackage>
							<inputSpec>${resource-directory}/openapi/rudi-kalim-api.json</inputSpec>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<delimiters>
						<delimiter>@</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
					<encoding>${project.build.sourceEncoding}</encoding>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>jks</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/log4j2.xml</exclude>
						<exclude>**/kalim-dev*.properties</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- JAR executable Spring Boot -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<executable>true</executable>
					<finalName>${project.artifactId}</finalName>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
			</plugin>

		</plugins>
	</build>

	<profiles>

		<!-- Profil de développement local -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
			</properties>
		</profile>

		<!-- Profil de développement local sur docker -->
		<profile>
			<id>dev-docker</id>
			<properties>
				<spring.profiles.active>dev-docker</spring.profiles.active>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-jar-docker</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<echo>ANT TASK - copying kalim jar file....</echo>
										<copy file="target/${project.artifactId}.jar"
												todir="${project.basedir}/../../../docker/kalim" overwrite="true"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<id>https</id>
			<properties>
				<spring.profiles.active>devs</spring.profiles.active>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-https-jks</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<echo>ANT TASK - copying https jks....</echo>
										<copy file="${project.basedir}/../../../ansible/keystore/dev/rudi-https-certificate.jks"
												todir="${project.basedir}/src/main/resources/keystore" overwrite="true"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Profil de intégration -->
		<profile>
			<id>ic</id>
			<properties>
				<spring.profiles.active>ic</spring.profiles.active>
			</properties>

		</profile>

		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
			</properties>
		</profile>

	</profiles>

</project>
