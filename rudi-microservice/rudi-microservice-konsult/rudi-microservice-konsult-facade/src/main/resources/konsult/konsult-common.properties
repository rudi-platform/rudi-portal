## Version de l'application
spring.application.name=rudi-konsult
application.version=@project.version@
application.comment=RUDI @project.artifactId@ @project.version@

application.role.administrateur.code=ADMINISTRATOR

## Configuration Postgres
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL94Dialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL94Dialect
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=target/create.sql

## Configuration FlyWay
#spring.flyway.user=${spring.datasource.username}
#spring.flyway.password=${spring.datasource.password}
#spring.flyway.url=${spring.datasource.url}
#spring.flyway.schemas=konsult_data
#spring.flyway.locations=classpath:bdd

## Actuators
management.endpoints.web.exposure.include=health,beans,info,env,configprops,loggers,heapdump,threaddump,metrics,scheduledtasks,mappings
management.endpoint.health.show-details=always
management.health.ldap.enabled=false

pagination.size=10

springdoc.swagger-ui.path=/konsult/swagger-ui.html
springdoc.api-docs.path=/konsult/v3/api-docs

# ATTENTION :
# Les propriétés logging.* ne sont pas prise en compte par ce fichier car il est ajouté manuellement via l'annotation :
#
#     @PropertySource(value = { "classpath:konsult/konsult-common.properties" })
#
# Cf : https://docs.spring.io/spring-boot/docs/2.3.5.RELEASE/reference/html/spring-boot-features.html#:~:text=properties%20such%20as-,logging.*,-and%20spring.main
# Il faut donc déplacer ces propriétés dans un fichier properties standard comme konsult.properties ou konsult-*.properties.
#logging.level.org.rudi.facet.dataverse.api.dataset=TRACE
#logging.level.org.rudi.facet.kaccess.service.dataset.impl=TRACE

# Active la recherche par metadataBlocks, plus performante que la recherche qui va chercher chaque JDD unitairement (cf RUDI-607)
# Attention pour l'activer, il faut que la version de Dataverse utilisée renvoie des metadataBlocks dans les résultats de recherche
features.metadataBlocks=true

# À activer si la version de Dataverse utilisée ne renvoie pas encore de metadataBlocks dans la recherche (cf RUDI-607)
#dataverse.api.useMockedMetadataBlocks=true

dataverse.instance1.port=8095
dataverse.instance2.port=8385

cms.implementation=magnolia
front-office.route-to-cms-resources=/konsult/v1/cms/resources?resourcePath=%s
front-office.route-to-cms=/cms/detail